#!/usr/bin/python


def build_libk():
    print_info('libk', 'Building libk')

    libk_files = get_all_arch_files('libk/', [ '.c', '.S' ])

    lib_files(
        bin_dir + 'libk.a',
        libk_files,
        toolchain = get_toolchain('default'),
    )

def build_libsys():
    print_info('libk', 'Building libsys')

    libsys_files = get_all_arch_files('libsys/', [ '.c', '.S' ])

    lib_files(
        bin_dir + 'libsys.a',
        libsys_files,
        toolchain = get_toolchain('default'),
    )

def build_libc():
    print_info('libk', 'Building libc')

    libk_files = get_all_arch_files('libk/', [ '.c', '.S' ])
    libsys_files = get_all_arch_files('libsys/', [ '.c', '.S' ])
    libc_files = get_all_arch_files('libc/', [ '.c', '.S' ])

    lib_files(
        bin_dir + 'libc.a',
        libk_files + libsys_files + libc_files,
        toolchain = get_toolchain('default'),
        includes = [ src_dir + 'libc/include' ],
    )

def build_libfs():
    print_info('libfs', 'Building libfs')

    libfs_files = get_all_arch_files('libfs/', [ '.c', '.S' ])

    lib_files(
        bin_dir + 'libfs.a',
        libfs_files,
        toolchain = get_toolchain('default'),
        includes = [
            src_dir + 'libc/include',
            src_dir + 'libfs/include'
        ],
    )

def build_hal():
    print_info('hal', 'Building HAL')

    hal_ld = find_deepest_arch_file('hal/hal.ld')
    hal_files = get_all_arch_files('hal/', [ '.c', '.S' ])
    libk = bin_dir + 'libk.a'

    build_files(
        bin_dir + 'hal.elf',
        hal_files,
        ext_libs = [ libk ],
        ext_ld_deps = [ hal_ld ],
        ld_script = hal_ld,
        toolchain = get_toolchain('default'),
    )

    disasm_exec(
        disasm_dir + 'hal.S',
        bin_dir + 'hal.elf',
        toolchain = get_toolchain('default'),
    )

def build_kernel():
    print_info('kernel', 'Building kernel')

    kernel_ld = find_deepest_arch_file('kernel/kernel.ld')
    kernel_files = get_all_arch_files('kernel/', [ '.c', '.S' ])
    libk = bin_dir + 'libk.a'
    libsys = bin_dir + 'libsys.a'

    build_files(
        bin_dir + 'kernel.elf',
        kernel_files,
        ext_libs = [ libsys, libk ],
        ext_ld_deps = [ kernel_ld ],
        ld_script = kernel_ld,
        toolchain = get_toolchain('default'),
    )

    disasm_exec(
        disasm_dir + 'kernel.S',
        bin_dir + 'kernel.elf',
        toolchain = get_toolchain('default'),
    )

def build_server(name, msg, ld, libs, incs):
    print_info(name, msg)

    dir_name = name + '/'
    elf_name = name + '.elf'
    asm_name = name + '.S'

    files = get_all_arch_files(dir_name, [ '.c', '.S' ])

    build_files(
        bin_dir + elf_name,
        files,
        ext_libs = libs,
        ext_ld_deps = [ ld ],
        ld_script = ld,
        toolchain = get_toolchain('default'),
        includes = incs,
    )

    disasm_exec(
        disasm_dir + asm_name,
        bin_dir + elf_name,
        toolchain = get_toolchain('default'),
    )

def build_servers():
    server_ld = find_deepest_arch_file('libc/user.ld')
    libs = [
        bin_dir + 'libfs.a',
        bin_dir + 'libc.a',
    ]
    includes = [
        src_dir + 'libc/include',
        src_dir + 'libfs/include'
    ]

    # System
    build_server('system', 'Building system', server_ld, libs, includes)

    # Device
    build_server('device', 'Building device', server_ld, libs, includes)

    # System
    #print_info('system', 'Building system')
    #system_files = get_all_arch_files('system/', [ '.c', '.S' ])

    #build_files(
        #bin_dir + 'system.elf',
        #system_files,
        #ext_libs = [ libc ],
        #ext_ld_deps = [ server_ld ],
        #ld_script = server_ld,
        #toolchain = get_toolchain('default'),
        #includes = includes,
    #)

    #disasm_exec(
        #disasm_dir + 'system.S',
        #bin_dir + 'system.elf',
        #toolchain = get_toolchain('default'),
    #)

    ## Device
    #print_info('device', 'Building device')
    #system_files = get_all_arch_files('device/', [ '.c', '.S' ])

    #build_files(
        #bin_dir + 'device.elf',
        #system_files,
        #ext_libs = [ libc ],
        #ext_ld_deps = [ server_ld ],
        #ld_script = server_ld,
        #toolchain = get_toolchain('default'),
        #includes = includes,
    #)

    #disasm_exec(
        #disasm_dir + 'device.S',
        #bin_dir + 'device.elf',
        #toolchain = get_toolchain('default'),
    #)

def build_fdt():
    print_info('fdt', 'Building flattened device tree')

    if not in_dict('dts', build_opts):
        print_fatal('No device tree is specified')
        quit()

    compile_file(
        img_dir + 'fdt.dtb',
        build_opts['dts'],
        toolchain = fdt_toolchain(),
    )

def build_coreimg():
    print_info('coreimg', 'Building core image')

    target_name = img_dir + 'coreimg.img'
    src_files = [ \
        bin_dir + 'hal.elf',
        bin_dir + 'kernel.elf',
        bin_dir + 'system.elf',
        bin_dir + 'device.elf',
        #bin_dir + 'shell.elf',
        #src_dir + 'init/init.py',
    ]

    coreimg_gen = tools_bin_dir + 'coreimg'
    deps = src_files + [ coreimg_gen ]

    cmd = coreimg_gen + ' ' + target_name + ' ' + ' '.join(src_files)
    operation(target_name, deps, cmd,
        echo=print_compile, title=get_filename(target_name),
        msg='Core image: ' + rel_path(target_name))

    record_update(target_name)

def build_loader():
    print_info('loader', 'Building loader')

    # Prepare loader file
    loader_ld = find_deepest_arch_file('loader/loader.ld')
    loader_files = get_all_arch_files('loader/', [ '.c', '.S' ])
    libk = bin_dir + 'libk.a'

    # Embed FDT
    embed_fdt = build_opts['embed_fdt'] if 'embed_fdt' in build_opts else False
    if embed_fdt:
        fdt = img_dir + 'fdt.dtb'
        fdt_c = b2c_dir + 'fdt.dtb.c'
        gen_embed_c(fdt_c, fdt, 'embedded_fdt', 8)
        loader_files.append(fdt_c)

    # Embed coreimg
    embed_coreimg = build_opts['embed_coreimg'] if 'embed_coreimg' in build_opts else False
    if embed_coreimg:
        coreimg_c = b2c_dir + 'coreimg.img.c'
        coreimg = img_dir + 'coreimg.img'
        gen_embed_c(coreimg_c, coreimg, 'embedded_coreimg', 8)
        loader_files.append(coreimg_c)

    # Build loader
    build_files(
        bin_dir + 'loader.elf',
        loader_files,
        ext_libs = [ libk ],
        ext_ld_deps = [ loader_ld ],
        ld_script = loader_ld,
        toolchain = get_toolchain('default'),
    )

    # Disasm
    disasm_exec(
        disasm_dir + 'loader.S',
        bin_dir + 'loader.elf',
        toolchain = get_toolchain('default'),
    )

def build_boot():
    print_info('boot', 'Building boot image')

    loader_elf = bin_dir + 'loader.elf'
    boot_elf = img_dir + 'boot.elf'
    boot_bin = img_dir + 'boot.bin'

    copy_file(boot_elf, loader_elf)

    gen_bin(
        target_name = boot_bin,
        src_name = boot_elf,
        toolchain = arch_default_toolchain
    )

def build_main():
    build_libk()
    build_libsys()
    build_libc()
    build_libfs()
    build_hal()
    build_kernel()
    build_servers()
    build_fdt()
    build_coreimg()
    build_loader()
    build_boot()

def run_qemu(opts):
    mp = opts['mp'] if 'mp' in opts else False

    title = 'Starting ' + ('MP ' if mp else '') + 'QEMU'
    print_info('qemu', title)

    bootimg = opts['bootimg'] if 'bootimg' in opts else img_dir + 'boot.elf'
    coreimg = opts['coreimg'] if 'coreimg' in opts else img_dir + 'coreimg.img'
    fdt = opts['fdt'] if 'fdt' in opts else img_dir + 'fdt.dtb'

    qemu = opts['exec']
    cpu = opts['cpu']
    mach = opts['machine']
    mem = opts['memory']
    graphic = opts['graphic'] if 'graphic' in opts else True
    embed_coreimg = build_opts['embed_coreimg'] if 'embed_coreimg' in build_opts else False
    embed_fdt = build_opts['embed_fdt'] if 'embed_fdt' in build_opts else False
    bootargs = opts['bootargs'] if 'bootargs' in opts else False
    bios = opts['bios'] if 'bios' in opts else None

    cmd = qemu + \
        ' -cpu {0}'.format(cpu) + \
        ' -M {0}'.format(mach) + \
        ' -m {0}'.format(mem) + \
        ' -serial mon:stdio' + \
        ('' if graphic else ' -nographic') + \
        (' -bios {0}'.format(bios) if bios else '') + \
        ' -kernel {0}'.format(bootimg) + \
        ('' if embed_coreimg else ' -initrd {0}'.format(coreimg)) + \
        ('' if embed_fdt else ' -dtb {0}'.format(fdt)) + \
        (' -append {0}'.format(bootargs) if bootargs else '') + \
        (' -smp {0}'.format(mp) if mp else '')

    code = exec_cmd(cmd)


# Setup callback functions
build_actions['build_main'] = build_main
