#!/usr/bin/python


def run_x86_qemu(mp='default', gui=False, debug=False):
    if not in_dict('qemu', build_opts):
        return

    opts = copy.deepcopy(build_opts['qemu'])
    opts['exec'] = 'qemu-system-' + x86_qemu
    opts['extra'] = '-no-reboot' + (' -S -s' if debug else '')
    opts['graphic'] = gui
    if not 'cpu' in opts:
        opts['cpu'] = x86_qemu_default_cpu

    if mp == 'default' and (not 'default_mp' in opts or not opts['default_mp']):
        opts['mp'] = False
    elif mp == False:
        opts['mp'] = False

    run_qemu(opts)

def build_preload():
    print_info('preload', 'Building preload')

    # Prepare preload file
    preload_ld = find_deepest_arch_file('preload/preload.ld')
    preload_files = get_all_arch_files('preload/', [ '.c', '.S' ])

    # Embed boot image
    bootimg_c = b2c_dir + 'boot.img.c'
    bootimg = img_dir + 'boot.bin'
    gen_embed_c(bootimg_c, bootimg, 'embedded_bootimg', 8)
    preload_files.append(bootimg_c)

    # Build
    build_files(
        img_dir + 'multiboot.elf',
        preload_files,
        ext_ld_deps = [ preload_ld ],
        ld_script = preload_ld,
        toolchain = get_toolchain('preload'),
    )

    # Disasm
    disasm_exec(
        disasm_dir + 'multiboot.S',
        img_dir + 'multiboot.elf',
        toolchain = get_toolchain('preload'),
    )

def build_arch():
    build_preload()

def qemu8():
    run_x86_qemu(True, False)

def qemu_gui():
    run_x86_qemu('default', True)

def qemu():
    run_x86_qemu('default', False)

def start_emu():
    emu_type = 'qemu'
    if emu_type in build_actions:
        build_actions[emu_type]()

def start_debug():
    run_x86_qemu('default', False, True)


# Setup arch toolchain
arch_default_toolchain = copy.deepcopy(default_toolchain)
arch_default_toolchain.set_opt('prefix', x86_toolchain_prefix)
arch_default_toolchain.set_opt('ld', 'ld')
arch_default_toolchain.set_opt('asflags', '-O2 -nostdlib -fno-builtin -fno-stack-protector -std=c99 -Wall ' + x86_as_flags)
arch_default_toolchain.set_opt('ccflags', '-O2 -nostdlib -fno-builtin -fno-stack-protector -std=c99 -Wall ' + x86_cc_flags)
arch_default_toolchain.set_opt('ldflags', '-static ' + x86_ld_flags)
build_toolchains['default'] = arch_default_toolchain

arch_loader_toolchain = copy.deepcopy(default_toolchain)
arch_loader_toolchain.set_opt('prefix', x86_preload_toolchain_prefix)
arch_loader_toolchain.set_opt('ld', 'ld')
arch_loader_toolchain.set_opt('asflags', '-O2 -nostdlib -fno-builtin -fno-stack-protector -std=c99 -Wall ' + x86_preload_as_flags)
arch_loader_toolchain.set_opt('ccflags', '-O2 -nostdlib -fno-builtin -fno-stack-protector -std=c99 -Wall ' + x86_preload_cc_flags)
arch_loader_toolchain.set_opt('ldflags', '-static ' + x86_preload_ld_flags)
build_toolchains['preload'] = arch_loader_toolchain


# Setup callback functions
build_actions['build_arch'] = build_arch

build_actions['qemu'] = qemu
build_actions['qemu8'] = qemu8
build_actions['qemu_gui'] = qemu_gui
build_actions['start_emu'] = start_emu
build_actions['start_debug'] = start_debug
